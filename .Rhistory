usethis::use_package("dplyr")
library(studycatchesird)
library("studycatchesird")
library(studycatchesird)
RF3_raisinf <- readRDS("~/Documents/Tunaatlas_level1/jobs/20220516234920/entities/global_catch_firms_Bastien_rds_level2_raising_both/Markdown/Level2_RF3without_gears/rds.rds")
tons(RF3_raisinf)
library("studycatchesird")
tons(RF3_raisinf)
studycatchesird::tons_no_summary(RF3_raisinf)
RF3_raising <- readRDS("~/Documents/Tunaatlas_level1/jobs/20220516234920/entities/global_catch_firms_Bastien_rds_level2_raising_both/Markdown/Level2_RF3without_gears/rds.rds")
rm(RF3_raisinf)
gc()
library("studycatchesird")
studycatchesird::tons(RF3_raising)
library(studycatchesird)
library(studycatchesird)
tons(RF3_raising)
install.packages("studycatchesird")
install.packages("studycatchesird")
require(studycatchesird)
studycatchesird::no(RF3_raising)
studycatchesird::summary_fish(RF3_raising)
studycatchesird::summary_fish(RF3_raising)
source("~/Documents/studycatchesird/R/tons.R", echo=TRUE)
source("~/Documents/studycatchesird/R/tons.R", echo=TRUE)
source("~/Documents/studycatchesird/R/number.R", echo=TRUE)
source("~/Documents/studycatchesird/R/summary_fish.R", echo=TRUE)
return(paste0("Tonnes = " ,round(tons(x)), " ; Number = ", round(no(x)), " ; Lines = ", nrow(x) ))
}
tons(RF3_raising)
tons(RF3_raising)
library(dplyr)
tons(RF3_raising)
summary_fish(RF3_raising)
?round
source("~/Documents/studycatchesird/R/summary_fish.R")
library(studycatchesird)
tons(RF3_raising)
summary_fish(RF3_raising)
devtools::document()
devtools::use_package("cowplot")
?use_package
usethis::use_package("cowplot")
use_this::use_package("ggplot2")
usethis::use_package("ggplot2")
usethis::use_package("dplyr")
#' @param first
#' @param second
#' @import cowplot
#' @import ggplot2
#' @import dplyr
#'
#' @return
#' @export
#'
#' @examples
pie_chart_2 = function(dimension, first,second) {
r <- deparse(substitute(dimension))
colnames <- enquo(dimension)
provisoire_i <-first %>%  group_by(!!colnames#, unit
)  %>% summarise(value = sum(value, na.rm = TRUE)) %>% #group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%  # group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
provisoire_t <- second %>%  group_by(!!colnames#, unit
)%>% summarise(value = sum(value, na.rm = TRUE)) %>%# group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%#   group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
set.seed(2) # For reproducibility of random color vector
number <- length(unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
pal <- brewer.pal(number,"Set1")
# myColors <- ColorRampPalette(brewer.pal(120,"Spectral"))
# names(myColors) <- levels(dat$grp)
# set.seed(2)
pal = setNames(pal, unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
ggplot_i <<- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ guides(fill=guide_legend(title=toupper(r)))
legend <- cowplot::get_legend(ggplot_i)
ggplot_t <<- ggplot(provisoire_t) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_t %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1, y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ theme(legend.position = "none")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <<- plot_grid(ggplot_i+ theme(legend.position = "none"), ggplot_t,nrow = 2,labels = c( paste0(titre_firstset),paste0( "second")),
label_size = 10)
plot_grid(title, nrow=2,plot_grid(graph,legend,ncol = 2),
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
library(studycatchesird)
pie_chart_1 = function(x, init= init) {
r <- deparse(substitute(x))
colnames <- enquo(x)
provisoire_i <-init %>%  group_by(!!colnames )%>% summarise(value = sum(value, na.rm = TRUE))  %>% arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select(  value, class)  %>% mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
ggplot_i <- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
colour = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(data = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <- plot_grid(ggplot_i,labels = c(paste0( titre_1)),
label_size = 10)
plot_grid(
title, graph,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
#' @param init
#'
#' @import cowplot
#' @import ggplot2
#' @import dplyr
#'
#' @return
#' @export
#'
#' @examples
pie_chart_1 = function(x, init= init) {
r <- deparse(substitute(x))
colnames <- enquo(x)
provisoire_i <-init %>%  group_by(!!colnames )%>% summarise(value = sum(value, na.rm = TRUE))  %>% arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select(  value, class)  %>% mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
ggplot_i <- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
colour = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(data = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <- plot_grid(ggplot_i,labels = c(paste0( titre_1)),
label_size = 10)
plot_grid(
title, graph,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
library(studycatchesird)
graph <<- plot_grid(ggplot_i+ theme(legend.position = "none"), ggplot_t,nrow = 2,labels = c( paste0(deparse(substitute(first))),paste0(deparse(substitute(second)))),
label_size = 10)
#' @param init
#'
#' @import cowplot
#' @import ggplot2
#' @import dplyr
#'
#' @return
#' @export
#'
#' @examples
pie_chart_1 = function(x, init= init) {
r <- deparse(substitute(x))
colnames <- enquo(x)
provisoire_i <-init %>%  group_by(!!colnames )%>% summarise(value = sum(value, na.rm = TRUE))  %>% arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select(  value, class)  %>% mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
ggplot_i <- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
colour = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(data = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <- plot_grid(ggplot_i,labels = c(paste0( titre_1)),
label_size = 10)
plot_grid(
title, graph,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
library(studycatchesird)
?brewer_pal
usethis::use_package("scales")
library(studycatchesird)
use_package("RColorBrewer")
usethis::use_package("RColorBrewer")
library(studycatchesird)
#' @import cowplot
#' @import ggplot2
#' @import dplyr
#' @import scales
#' @import RColorBrewer
#'
#' @return
#' @export
#'
#' @examples
pie_chart_2 = function(dimension, unit = c("MT","MTNO","Tons","t"), first, second) {
r <- deparse(substitute(dimension))
colnames <- enquo(dimension)
first <- first %>% filter(unit%in%unit)
second <- second %>% filter(unit%in%unit)
provisoire_i <-first %>%  group_by(!!colnames#, unit
)  %>% summarise(value = sum(value, na.rm = TRUE)) %>% #group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%  # group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
provisoire_t <- second %>%  group_by(!!colnames#, unit
)%>% summarise(value = sum(value, na.rm = TRUE)) %>%# group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%#   group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
set.seed(2) # For reproducibility of random color vector
number <- length(unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
pal <- brewer.pal(number,"Set1")
# myColors <- ColorRampPalette(brewer.pal(120,"Spectral"))
# names(myColors) <- levels(dat$grp)
# set.seed(2)
pal = setNames(pal, unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
ggplot_i <<- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ guides(fill=guide_legend(title=toupper(r)))
legend <- cowplot::get_legend(ggplot_i)
ggplot_t <<- ggplot(provisoire_t) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_t %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1, y = ypos_ligne/100, label = paste0(pourcentage,"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ theme(legend.position = "none")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <<- plot_grid(ggplot_i+ theme(legend.position = "none"), ggplot_t,nrow = 2,labels = c( paste0(deparse(substitute(first))),paste0(deparse(substitute(second)))),
label_size = 10)
plot_grid(title, nrow=2,plot_grid(graph,legend,ncol = 2),
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
x <- 0
deparse(quote(x))
#' @import cowplot
#' @import ggplot2
#' @import dplyr
#' @import scales
#' @import RColorBrewer
#'
#' @return
#' @export
#'
#' @examples
pie_chart_2 = function(dimension, unit = c("MT","MTNO","Tons","t"), first, second) {
r <- deparse(substitute(dimension))
colnames <- enquo(dimension)
first <- first %>% filter(unit%in%unit)
second <- second %>% filter(unit%in%unit)
provisoire_i <-first %>%  group_by(!!colnames#, unit
)  %>% summarise(value = sum(value, na.rm = TRUE)) %>% #group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%  # group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
provisoire_t <- second %>%  group_by(!!colnames#, unit
)%>% summarise(value = sum(value, na.rm = TRUE)) %>%# group_by(unit) %>%
arrange(desc(value)) %>%   mutate(id = row_number())%>%
mutate(class = as.factor(ifelse(id<4,!!colnames,"Others"))) %>%
group_by(class#, unit
) %>%  summarise(value = sum(value, na.rm = TRUE))%>%ungroup()%>%
select( value, class,#unit
) %>%#   group_by(unit) %>%
mutate(pourcentage = prop.table(value)*100)%>%
mutate(labels = paste0(pourcentage," ",  " % "))%>% arrange(desc(class))%>%
mutate(ypos_ligne = cumsum(pourcentage)- 0.5*pourcentage ) %>%
distinct()
set.seed(2) # For reproducibility of random color vector
number <- length(unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
pal <- brewer.pal(number,"Set1")
# myColors <- ColorRampPalette(brewer.pal(120,"Spectral"))
# names(myColors) <- levels(dat$grp)
# set.seed(2)
pal = setNames(pal, unique(unlist(as.character(c(provisoire_i$class, provisoire_t$class)))))
ggplot_i <<- ggplot(provisoire_i) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_i %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1 ,y = ypos_ligne/100, label = paste0(round(pourcentage),"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ guides(fill=guide_legend(title=toupper(r)))
legend <- cowplot::get_legend(ggplot_i)
ggplot_t <<- ggplot(provisoire_t) +
aes(
x = "",
fill = class,
group = class,
weight = pourcentage
) +
geom_bar(position = "fill") +
scale_fill_hue(direction = 1) +
scale_color_hue(direction = 1) +
theme_minimal()+ coord_polar("y", start=0)+ geom_text(first = (provisoire_t %>% mutate_if(is.numeric, round)), size = 3,
aes( x = 1, y = ypos_ligne/100, label = paste0(round(pourcentage),"%")), color = "black")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
labs(x = "", y="")+ scale_fill_manual(values=pal)+ theme(legend.position = "none")
title <- ggdraw() +
draw_label(
paste0("Distribution in value for the dimension : ",r),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
graph <<- plot_grid(ggplot_i+ theme(legend.position = "none"), ggplot_t,nrow = 2,labels = c( deparse(quote(first)),deparse(quote(second))),
label_size = 10)
plot_grid(title, nrow=2,plot_grid(graph,legend,ncol = 2),
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))+
theme(plot.background = element_rect(color = "black"))
}
library(studycatchesird)
usethis::use_package("RcolorBrewer")
usethis::use_package("RColorBrewer")
library(studycatchesird)
deparse(substitute(absurd_conversion_factor  %>%  rename(value=MT) %>% mutate(unit="MT")))
renv::activate()
